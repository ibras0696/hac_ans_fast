import aiohttp
import asyncio

# üîë API-–∫–ª—é—á –¥–ª—è –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞
API_KEY = "68704a352e3c7425979031dtzd7db3a"

# üß≠ –°–ª–æ–≤–∞—Ä—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –ø–æ–≥–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤
WEATHER_CODES = {
    0: "–Ø—Å–Ω–æ",
    1: "–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ",
    2: "–ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ",
    3: "–ü–∞—Å–º—É—Ä–Ω–æ",
    45: "–¢—É–º–∞–Ω",
    48: "–ò–Ω–µ–π",
    51: "–°–ª–∞–±–∞—è –º–æ—Ä–æ—Å—å",
    53: "–ú–æ—Ä–æ—Å—å",
    55: "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å",
    61: "–°–ª–∞–±—ã–π –¥–æ–∂–¥—å",
    63: "–î–æ–∂–¥—å",
    65: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å",
    80: "–õ–∏–≤–µ–Ω—å",
    81: "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å",
    82: "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å"
}


async def get_coordinates(city: str, session: aiohttp.ClientSession) -> tuple[float, float] | tuple[None, None]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É) –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API Maps.co.

    :param city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–æ—Å–∫–≤–∞").
    :return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ —à–∏—Ä–æ—Ç—ã –∏ –¥–æ–ª–≥–æ—Ç—ã (lat, lon) –∏–ª–∏ (None, None) –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    url = f"https://geocode.maps.co/search?q={city}&api_key={API_KEY}"
    try:
        async with session.get(url, timeout=10) as response:
            response.raise_for_status()
            data = await response.json()
            if not data:
                return None, None
            lat = float(data[0]['lat'])
            lon = float(data[0]['lon'])
            return lat, lon
    except (aiohttp.ClientError, asyncio.TimeoutError):
        return None, None
    except (KeyError, ValueError):
        return None, None


async def get_weather(lat: float, lon: float, session: aiohttp.ClientSession) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —Å API Open-Meteo.

    :param lat: –®–∏—Ä–æ—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    :param lon: –î–æ–ª–≥–æ—Ç–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.
    :return: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ–≥–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (temperature, windspeed, weathercode, time) –∏–ª–∏ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ.
    """
    url = (
        f"https://api.open-meteo.com/v1/forecast"
        f"?latitude={lat}&longitude={lon}&current_weather=true"
    )
    try:
        async with session.get(url, timeout=10) as response:
            response.raise_for_status()
            data = await response.json()
            return data.get("current_weather", {})
    except (aiohttp.ClientError, asyncio.TimeoutError):
        return {}
    except KeyError:
        return {}


async def pars_weather_country(city: str) -> list:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –≥–æ—Ä–æ–¥—É, –∑–∞—Ç–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ —ç—Ç–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º.

    :param city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.
  :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    [
        city,           # str: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä "–ú–æ—Å–∫–≤–∞"
        temperature,    # float | None: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö –¶–µ–ª—å—Å–∏—è
        windspeed,      # float | None: –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –≤ —á–∞—Å
        description,    # str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–Ø—Å–Ω–æ", "–ü–∞—Å–º—É—Ä–Ω–æ", "–î–æ–∂–¥—å")
        weathercode,    # int | None: –ö–æ–¥ –ø–æ–≥–æ–¥—ã –ø–æ Open-Meteo, –Ω–∞–ø—Ä–∏–º–µ—Ä 0, 1, 2, 3 –∏ —Ç.–¥.
        time            # str | None: –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601 (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-07-11T14:00")
    ]
    """
    async with aiohttp.ClientSession() as session:
        lat, lon = await get_coordinates(city, session)
        if lat is None or lon is None:
            return []
        if lat is None or lon is None:
            return []
        weather = await get_weather(lat, lon, session)
        if not weather:
            return []

    code = weather.get("weathercode")
    description = WEATHER_CODES.get(code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞")

    return [
        city,
        weather.get("temperature"),
        weather.get("windspeed"),
        description,
        weather.get("time")
    ]


# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∑–∞–≥–æ—Ç–æ–≤–∫—É –ø–æ–¥ –±–æ—Ç–∞/–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
if __name__ == "__main__":
    result = asyncio.run(pars_weather_country("–ú–æ—Å–∫–≤–∞"))
    print(result)
